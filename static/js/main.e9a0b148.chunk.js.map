{"version":3,"sources":["components/Button/ButtonPresentation.module.css","components/Text/Text.module.css","App.module.css","components/Button/ButtonPresentation.js","components/Button/Button.js","components/Text/Text.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ButtonPresentation","children","isHovered","isPressed","isFocused","onMouseDown","onMouseUp","onMouseLeave","onMouseEnter","className","styles","base","default","hovered","clicked","focused","Button","onClick","useState","setIsHovered","setIsPressed","setIsFocused","onFocus","onBlur","useButtonBehaviour","Text","variant","variantStyle","body","title","callToAction","nav","React","createElement","App","container","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e9a0b148.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"base\":\"ButtonPresentation_base__2FqK9\",\"default\":\"ButtonPresentation_default__-7yLl\",\"hovered\":\"ButtonPresentation_hovered__1cO8l\",\"clicked\":\"ButtonPresentation_clicked__3iNRf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"base\":\"Text_base__2TY8E\",\"body\":\"Text_body__2HaUB\",\"title\":\"Text_title__jsxwU\",\"nav\":\"Text_nav__3cD4k\",\"callToAction\":\"Text_callToAction__2ooKI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","import React from 'react'\nimport styles from './ButtonPresentation.module.css'\n\nexport default function ButtonPresentation({children, isHovered, isPressed, isFocused, onMouseDown, onMouseUp, onMouseLeave, onMouseEnter}) {\n  return(\n    <button \n      className={`${styles.base} \n      ${!isHovered && !isPressed ? styles.default : ''} \n      ${isHovered ? styles.hovered : ''} \n      ${isPressed ? styles.clicked : ''} \n      ${isFocused ? styles.focused : ''}\n      `}\n      onMouseDown={onMouseDown}\n      onMouseUp={onMouseUp}\n      onMouseLeave={onMouseLeave}\n      onMouseEnter={onMouseEnter}\n      >{children}\n    </button>\n  )\n}\n\n// Faster coding: \n// Could replace arguments onMouseDown, onMouseUp, onMouseLeave, onMouseEnter by ...props\n// and in return (), replace \n// onMouseDown={onMouseDown}\n// onMouseUp={onMouseUp}\n// onMouseLeave={onMouseLeave}\n// onMouseEnter={onMouseEnter}\n// by {...props}","import React, {useState} from 'react'\nimport ButtonPresentation from './ButtonPresentation'\n\n// Now, we want to isolate the logic from the Button parent component, so that we can reuse this logic \n// somewhere else, for example in another component that also needs click, hover and focus.\n// To do so, we create a custom hook, which is nothing more than taking the logic and placing it in a \n// function which name starts with \"use\", and which returns the state and functions as an object.\n// We then call this function in the Button component and destructure it.\n\nfunction useButtonBehaviour({onClick}) {\n  const [isHovered, setIsHovered] = useState(false)\n  const [isPressed, setIsPressed] = useState(false)\n  const [isFocused, setIsFocused] = useState(false)\n\n  function onMouseDown() {\n    setIsPressed(true)\n    onClick()\n  }\n\n  function onMouseUp() {\n    setIsPressed(false)\n  }\n\n  function onMouseLeave() {\n    setIsHovered(false)\n  }\n\n  function onMouseEnter() {\n    setIsHovered(true)\n  }\n\n  function onFocus() {\n    setIsFocused(true)\n  }\n\n  function onBlur() {\n    setIsFocused(false)\n  }\n\n  return {isHovered, isPressed, isFocused, onMouseDown, onMouseUp, onMouseLeave, onMouseEnter, onFocus, onBlur}\n}\n\nexport default function Button({children, onClick}) {\n\n  const {isHovered, isPressed, isFocused, onMouseDown, onMouseUp, onMouseLeave, onMouseEnter, onFocus, onBlur} = useButtonBehaviour({onClick})\n\n  return(\n    <ButtonPresentation\n      isHovered={isHovered}\n      isPressed={isPressed}\n      isFocused={isFocused}\n      onMouseDown={onMouseDown}\n      onMouseUp={onMouseUp}\n      onMouseLeave={onMouseLeave}\n      onMouseEnter={onMouseEnter}\n      onFocus={onFocus}\n      onBlur={onBlur}\n    >{children}</ButtonPresentation>\n  )\n}","import React from 'react'\n\nimport styles from './Text.module.css'\n\nexport default function Text({children, variant}) {\n\n  const htmlMarker = {\n    body: 'p',\n    title: 'h1',\n    callToAction: 'h2',\n    nav: 'h3',\n  }\n\n  const variantStyle = {\n    body: styles.body,\n    title: styles.title,\n    callToAction: styles.callToAction,\n    nav: styles.nav,\n  }\n\n  return variant ? React.createElement(htmlMarker[variant], {className: variantStyle[variant]}, children) : null;\n}","import React, {useState, useCallback} from 'react';\nimport './static/css/cssreset.css'\nimport styles from './App.module.css';\nimport Button from './components/Button/Button';\nimport Text from './components/Text/Text'\n\nexport default function App() {\n  function onClick() {\n    console.log(\"clicked\")\n  }\n\n  return (\n    <div className={styles.container}>\n      <Text variant='title'>Half Moon Tarot</Text>\n      <Button onClick={onClick}><Text variant='callToAction'>Book a Reading</Text></Button>\n      <Text variant='body'>Hello. I’m Lo. I practice what can be called “psychological” tarot. This means I see tarot as a tool to help you gain insights on your thoughts and situation, to find answers within yourself, and not as an artefact that gives you magical answers. \n\nI also believe that we should all be in charge of our own narrative. As such, while I will help you understand the meaning of the cards and how they might interact together, I will also invite you to share with me as little or as much as you like about what the cards may elicit in you, and let to your decision how much you’d like me to help you weave your story with the cards’ meanings.\n\nWe will go over all this in our first session, and any question you may have. You’re also welcome to email me if you have any question regarding the sessions or my practice.</Text>\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}